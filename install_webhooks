#!/usr/bin/env /bin/sh

program() {
   echo ""
   echo "Usage: $0 -i <DOCKER_IMAGE_NAME> -d <APPLICATION_DIRECTORY>"
   echo "\t-h IP address of the host (Default: 0.0.0.0)"
   echo "\t-p Running port of the application (Default: 5500)"
   echo "\t-t Nginx Hestia Template"
   echo "\t-u Run the script as user (Default: Current user)"
   echo "\t-c Hooks configuration file. By default a test configuration is generated"
   exit 1 # Exit script after printing help
}

while getopts "h:p:t:u:c:" opt
do
   case "$opt" in
      h) host="$OPTARG" ;;
      p) port="$OPTARG" ;;
      t) template="$OPTARG" ;;
      u) runAs="$OPTARG" ;;
      c) configPath="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

CURRENT_WORKING_DIRECTORY="$(pwd)"
BINARY_DIRECTORY=${CURRENT_WORKING_DIRECTORY}/.bin
WEBHOOKS_DIRECTORY=/etc/webhooks
GO_VERSION="1.19.1"
user=${runAs:-$USER}
APP_PORT=${port:-5500}
proxyTemplate=${template}
webhookConfigPath="$WEBHOOKS_DIRECTORY/hooks/config.yml"

#region Helper functions
start_webhook_worker() {
    bin=$(command -v supervisorctl)

    # Install supervisor if not exist on the system
    if ! [ -x "$bin" ]; then
        apt-get update && apt install supervisor -y
        # Start supervisor service
        service supervisor start
        # Enable supervisor to start when system start
        systemctl enable supervisor
    fi

    bin=$(command -v supervisorctl)
    if ! [ -x "$bin" ]; then
        echo 'No supervisor binary located on the system!'
        exit 1
    fi

    # Stop running workers
    echo "Stopping previously running workers..."
    supervisorctl stop webhooks-worker:*

    # Write supervisor webhooks worker configuration values
    {
        echo "[program:webhooks-worker]"
        echo "process_name=%(program_name)s_%(process_num)02d"
        echo "command=/usr/local/bin/webhook -ip 0.0.0.0 -hotreload -port $APP_PORT -logfile $WEBHOOKS_DIRECTORY/logs/webhooks.logs -hooks $1 --verbose"
        echo "autostart=true"
        echo "autorestart=true"
        echo "stopasgroup=true"
        echo "killasgroup=true"
        echo "user=$user"
        echo "numprocs=1"
        echo "redirect_stderr=true"
        echo "stdout_logfile=$WEBHOOKS_DIRECTORY/logs/webhooks.logs"
        echo "stopwaitsecs=3600"
    } >'/etc/supervisor/conf.d/webhooks-worker.conf'

    # Update supervisor configs
    supervisorctl reread && supervisorctl update

    # Start the webhooks workers
    supervisorctl start webhooks-worker:*
}

install_golang_binary() {
    # Download & Configure GoLang binary
    wget -O "$CURRENT_WORKING_DIRECTORY/go$GO_VERSION.linux-amd64.tar.gz" "https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz"
    # Removes previously installed go directory and install the current go
    echo "Cleaning up previous go installation..."
    rm -rf /usr/local/go
    echo "Extracting go binaries..."
    tar -C /usr/local -xzf "$CURRENT_WORKING_DIRECTORY/go$GO_VERSION.linux-amd64.tar.gz"
    echo 'Exporting go binaries path...'
    export PATH=/usr/local/go/bin:$PATH
    echo "Exported go binary path... $PATH"
    # Remove go source
    echo "Removing ving installed go zip files..."
    rm "$CURRENT_WORKING_DIRECTORY/go$GO_VERSION.linux-amd64.tar.gz"
}

uninstall_go_binary() {
    rm -f $(command -v go) && rm -rf /usr/local/go
}

cleanup_webhook_git_directory() {
    rm -rf "$CURRENT_WORKING_DIRECTORY/webhook"
}

make_webhook_binary() {
    cd $CURRENT_WORKING_DIRECTORY
    git clone https://github.com/adnanh/webhook.git webhook
    rm -rf $BINARY_DIRECTORY && mkdir $BINARY_DIRECTORY
    echo "Building webhooks binary..."
    cd webhook && go build -o $BINARY_DIRECTORY github.com/adnanh/webhook
    echo "Linking webhook binaries..."
    rm -f /usr/local/bin/webhook && ln -s "$BINARY_DIRECTORY/webhook" /usr/local/bin/webhook
    cd $CURRENT_WORKING_DIRECTORY
}

create_hooks_config() {
    if ! [ -d "$WEBHOOKS_DIRECTORY/hooks" ]; then
        echo "Creating hooks directory at $WEBHOOKS_DIRECTORY/hooks ..."
        mkdir -p "$WEBHOOKS_DIRECTORY/hooks"
    fi
    if ! [ -z "$configPath" ] && [ -f "$configPath" ] ; then
        hooksConfig=$(<"$configPath")
        extension=$(echo "$configPath" | cut -d "." -f2)
        if ! [ -z $extension ]; then
            extension='yml'
        fi
        webhookConfigPath="$WEBHOOKS_DIRECTORY/hooks/config.$extension"
        echo "$hooksConfig" > "$webhookConfigPath"
    else
        if ! [ -f "$WEBHOOKS_DIRECTORY/hooks/config.yml" ]; then
            {
                echo "-"
                echo "  id: \"test-script-hook\""
                echo "  execute-command: \"$WEBHOOKS_DIRECTORY/hooks/hello.sh\""
                echo "  command-working-directory: \"$WEBHOOKS_DIRECTORY\""
                echo "  response-message: \"Webhooks server in working state!\""
            } > "$WEBHOOKS_DIRECTORY/hooks/config.yml"
            {
                echo "#!/bin/bash"
                echo ""
                echo "echo 'Hello World' >> $WEBHOOKS_DIRECTORY/logs/hello.log"
            } > "$WEBHOOKS_DIRECTORY/hooks/hello.sh"
            chmod +x "$WEBHOOKS_DIRECTORY/hooks/hello.sh"
            chown -R $user "$WEBHOOKS_DIRECTORY/hooks/config.yml"
        else
            echo "Warning : Running wehbooks with existing configuration file was found at $WEBHOOKS_DIRECTORY/hooks/config.yml."
        fi
    fi
}

configure_webhook_config_dir() {
    if ! [ -d "$WEBHOOKS_DIRECTORY" ]; then
        # Create webhook directory
        mkdir "$WEBHOOKS_DIRECTORY"
        # Create webhook logs directory
        mkdir "$WEBHOOKS_DIRECTORY/logs/"
        # Grant ownership to the specified command user
        chown -R $user "$WEBHOOKS_DIRECTORY"
    fi

    # Create the required webhooks configuration
    create_hooks_config

    # Make the log file writable by the user process
    chown $user "$WEBHOOKS_DIRECTORY/logs/webhooks.logs" && chmod 555 "$WEBHOOKS_DIRECTORY/logs/webhooks.logs"
}

create_proxy_template() {
if ! [ -z "$proxyTemplate" ]; then
        proxyTemplate="$proxyTemplate.$APP_PORT"
        echo "Creating Hestia Nginx template... $proxyTemplate"
        createWebhookTemplateCommand="$CURRENT_WORKING_DIRECTORY/hs-nginx-proxy --port $APP_PORT --template $proxyTemplate --directory /usr/local/hestia/data/templates/web/nginx/php-fpm"
        echo "$(eval $createWebhookTemplateCommand)" >> /dev/null
    fi
}
#enregion Helper function

# Install the GoLang Library
install_golang_binary

# Install and build webhook package
make_webhook_binary

# Remove Go binaries
uninstall_go_binary

# Cleanup by removing webhook git directory
cleanup_webhook_git_directory

# Configure webhook configurations directory
configure_webhook_config_dir

# Create proxy template
create_proxy_template

# Add webhook worker supervisor config
start_webhook_worker "$webhookConfigPath"
